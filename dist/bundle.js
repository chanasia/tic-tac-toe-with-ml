import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, a as space, t as text, b as add_location, c as attr_dev, l as listen_dev, f as insert_dev, n as noop, g as detach_dev, r as run_all } from './bundle2.js';

/* src/App.svelte generated by Svelte v3.14.1 */

const file = "src/App.svelte";

function create_fragment(ctx) {
	let div0;
	let t2;
	let div1;
	let t5;
	let div2;
	let t7;
	let input0;
	let t8;
	let input1;
	let t9;
	let dispose;

	const block = {
		c: function create() {
			div0 = element("div");
			div0.textContent = `C: ${celcius}`;
			t2 = space();
			div1 = element("div");
			div1.textContent = `F: ${fahrenheit}`;
			t5 = space();
			div2 = element("div");
			div2.textContent = `${generateRandomNumber()}`;
			t7 = space();
			input0 = element("input");
			t8 = text(" °c =\n");
			input1 = element("input");
			t9 = text(" °f");
			add_location(div0, file, 9, 0, 126);
			add_location(div1, file, 10, 0, 150);
			add_location(div2, file, 11, 0, 177);
			input0.value = celcius;
			attr_dev(input0, "type", "number");
			attr_dev(input0, "class", "svelte-rhd2k2");
			add_location(input0, file, 12, 0, 215);
			input1.value = fahrenheit;
			attr_dev(input1, "type", "number");
			attr_dev(input1, "class", "svelte-rhd2k2");
			add_location(input1, file, 13, 0, 303);

			dispose = [
				listen_dev(input0, "input", ctx.input_handler, false, false, false),
				listen_dev(input1, "input", ctx.input_handler_1, false, false, false)
			];
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, div1, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, div2, anchor);
			insert_dev(target, t7, anchor);
			insert_dev(target, input0, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, input1, anchor);
			insert_dev(target, t9, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div2);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(input0);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(input1);
			if (detaching) detach_dev(t9);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self) {
	const input_handler = e => setBothFromC(e.target.value);
	const input_handler_1 = e => setBothFromF(e.target.value);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return { input_handler, input_handler_1 };
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});
	}
}

// Svelte!
new App({
    target: document.body
});
//# sourceMappingURL=bundle.js.map
